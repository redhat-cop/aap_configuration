---
- name: Block for removing old content
  ansible.builtin.block:
    - name: Pull Current workflow_job_templates
      ansible.builtin.uri:
        url: "{{ controller_hostname | default(omit, true) }}/api/v2/workflow_job_templates/"
        method: GET
        return_content: true
        body_format: json
        status_code: [200, 202]
        force_basic_auth: true
        user: "{{ controller_username | default(omit, true) }}"
        password: "{{ controller_password | default(omit, true) }}"
        validate_certs: "{{ controller_validate_certs | default(omit) }}"
      register: r_current_workflow_job_templates

    - name: Get differences
      ansible.builtin.set_fact:
        workflow_job_templates_difference: "{{ _workflow_job_templates_in_controller | difference(_workflow_job_templates_in_code) }}"
      vars:
        _workflow_job_templates_in_controller: "{{ r_current_workflow_job_templates.json.results | json_query(_query2) }}"
        _query2: "[].name"
        _workflow_job_templates_in_code: "{{ controller_workflow_job_templates | json_query(_query1) }}"
        _query1: "[].name"

    - name: Temp add items to list with state absent
      ansible.builtin.set_fact:
        controller_workflow_job_templates: "{{ (controller_workflow_job_templates | default([])) + [{'name': item, 'state': 'absent'}] }}"
      loop: "{{ workflow_job_templates_difference }}"
  when: workflow_job_templates_auto_remove_old or auto_remove_all_old

# Create Workflow
- name: Manage Workflows
  workflow_job_template:
    name:                               "{{ __workflow_loop_item.name | mandatory }}"
    new_name:                           "{{ __workflow_loop_item.new_name | default(omit, true) }}"
    copy_from:                          "{{ __workflow_loop_item.copy_from | default(omit, true) }}"
    description:                        "{{ __workflow_loop_item.description | default(omit, true) }}"
    extra_vars:                         "{{ __workflow_loop_item.extra_vars | default(omit, true) }}"
    allow_simultaneous:                 "{{ __workflow_loop_item.allow_simultaneous | default(omit) }}"
    organization:                       "{{ __workflow_loop_item.organization.name | default( __workflow_loop_item.organization | default(omit, true)) }}"
    ask_variables_on_launch:            "{{ __workflow_loop_item.ask_variables_on_launch | default(omit) }}"  # only supported starting from Ansible 2.9
    inventory:                          "{{ __workflow_loop_item.inventory.name | default( __workflow_loop_item.inventory | default(omit, true)) }}"
    limit:                              "{{ __workflow_loop_item.limit | default(omit, true) }}"
    labels:                             "{{ __workflow_loop_item.labels | default(__workflow_loop_item.related.labels | default([]) | map(attribute='name') | list ) }}"
    scm_branch:                         "{{ __workflow_loop_item.scm_branch | default(omit, true) }}"
    ask_inventory_on_launch:            "{{ __workflow_loop_item.ask_inventory_on_launch | default(omit) }}"
    ask_scm_branch_on_launch:           "{{ __workflow_loop_item.ask_scm_branch_on_launch | default(omit) }}"
    ask_limit_on_launch:                "{{ __workflow_loop_item.ask_limit_on_launch | default(omit) }}"
    webhook_service:                    "{{ __workflow_loop_item.webhook_service | default(omit, true) }}"
    webhook_credential:                 "{{ __workflow_loop_item.webhook_credential.name | default(__workflow_loop_item.webhook_credential | default(omit, true)) }}"
    survey_enabled:                     "{{ __workflow_loop_item.survey_enabled | default(omit) }}"
    survey_spec:                        "{{ __workflow_loop_item.related.survey_spec | default( __workflow_loop_item.survey_spec | default( __workflow_loop_item.survey | default(omit, true))) }}"
    schema:                             "{{ __workflow_loop_item.related.workflow_nodes | default( __workflow_loop_item.workflow_nodes | default(omit, true) ) }}"
    destroy_current_schema:             "{{ __workflow_loop_item.destroy_current_schema | default(omit) }}"
    state:                              "{{ __workflow_loop_item.state | default(controller_state | default('present')) }}"
    notification_templates_started:     "{{ __workflow_loop_item.notification_templates_started | default(__workflow_loop_item.related.notification_templates_started | default([]) | map(attribute='name') | list ) }}"
    notification_templates_success:     "{{ __workflow_loop_item.notification_templates_success | default(__workflow_loop_item.related.notification_templates_success | default([]) | map(attribute='name') | list ) }}"
    notification_templates_error:       "{{ __workflow_loop_item.notification_templates_error | default(__workflow_loop_item.related.notification_templates_error | default([]) | map(attribute='name') | list ) }}"
    notification_templates_approvals:   "{{ __workflow_loop_item.notification_templates_approvals | default(__workflow_loop_item.related.notification_templates_approvals | default([]) | map(attribute='name') | list ) }}"

    # Role Standard Options
    controller_username:                "{{ controller_username | default(omit, true) }}"
    controller_password:                "{{ controller_password | default(omit, true) }}"
    controller_oauthtoken:              "{{ controller_oauthtoken | default(omit, true) }}"
    controller_host:                    "{{ controller_hostname | default(omit) }}"
    controller_config_file:             "{{ controller_config_file | default(omit, true) }}"
    validate_certs:                     "{{ controller_validate_certs | default(omit) }}"
  loop: "{{ controller_workflows }}"
  loop_control:
    loop_var: __workflow_loop_item
  no_log: "{{ workflow_job_templates_secure_logging }}"

# Create links between workflow node
- name: loop over nodes in schema to add to workflow templates
  include_tasks: "add_workflows_schema.yml"
  loop: "{{ controller_workflows }}"
  loop_control:
    loop_var: __workflow_loop_item
  when:
    - __workflow_loop_item.simplified_workflow_nodes is defined
    - __workflow_loop_item.state == "present"
...
