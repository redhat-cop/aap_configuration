---
- name: Determine if filetree_controller_execution_environments is a string or list
  ansible.builtin.set_fact:
    __filetree_controller_execution_environments: "{{ [filetree_controller_execution_environments] if filetree_controller_execution_environments is string else filetree_controller_execution_environments }}"

- name: "Get list of files"
  ansible.builtin.find:
    paths: "{{ __filetree_controller_execution_environments_item }}"
    file_type: file
    recurse: true
  loop: "{{ __filetree_controller_execution_environments }}"
  loop_control:
    loop_var: __filetree_controller_execution_environments_item
  register: __list_files_controller_execution_environments

- name: Extract file paths using json_query
  ansible.builtin.set_fact:
    __list_files_controller_execution_environments: "{{ __list_files_controller_execution_environments | json_query('results[].files[].path') }}"

- name: "Read Execution Environments definitions"
  ansible.builtin.include_vars:
    file: "{{ __read_execution_environments_definitions_item }}"
  loop: "{{ __list_files_controller_execution_environments }}"
  loop_control:
    loop_var: __read_execution_environments_definitions_item
  register: __contents_filetree_controller_execution_environments
  failed_when: "'VARIABLE IS NOT DEFINED' in __contents_filetree_controller_execution_environments"

- name: "Populate Execution Environments list"
  ansible.builtin.set_fact:
    __populate_controller_execution_environments: "{{ (__populate_controller_execution_environments | default([])) + __populate_execution_environments_list_item.ansible_facts.controller_execution_environments }}"
  loop: "{{ __contents_filetree_controller_execution_environments.results }}"
  loop_control:
    loop_var: __populate_execution_environments_list_item
  no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
  when: __contents_filetree_controller_execution_environments.results is defined and __populate_execution_environments_list_item.ansible_facts.controller_execution_environments is defined

- name: "Segregated Execution Environments list when controller_location is defined"
  when: controller_location is defined and __populate_controller_execution_environments is defined
  block:
    - name: "Populate Execution Environments list by _common objects"
      ansible.builtin.set_fact:
        __populate_controller_execution_environments_common: "{{ (__populate_controller_execution_environments_common | default([])) + [__populate_execution_environments_list_common_item] }}"
      loop: "{{ __populate_controller_execution_environments }}"
      loop_control:
        loop_var: __populate_execution_environments_list_common_item
      no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
      when: "__populate_execution_environments_list_common_item.controller_location is not defined"

    - name: "Populate Execution Environments list by __site objects"
      ansible.builtin.set_fact:
        __populate_controller_execution_environments_site: "{{ (__populate_controller_execution_environments_site | default([])) + [__populate_execution_environments_list_site_item] }}"
      loop: "{{ __populate_controller_execution_environments }}"
      loop_control:
        loop_var: __populate_execution_environments_list_site_item
      no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
      when: "__populate_execution_environments_list_site_item.controller_location is defined and __populate_execution_environments_list_site_item.controller_location == controller_location"

    - name: "Concatenate Execution Environments list common + site"
      ansible.builtin.set_fact:
        __populate_controller_execution_environments_total: "{{ __populate_controller_execution_environments_common | default([]) + __populate_controller_execution_environments_site }}"
      no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
      when: __populate_controller_execution_environments_site is defined

    - name: "Set Execution Environments Data Structure common + site concatenated"
      ansible.builtin.set_fact:
        __populate_controller_execution_environments: "{{ __populate_controller_execution_environments_total }}"
      no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
      when: __populate_controller_execution_environments_total is defined

- name: "Set Execution Environments Data Structure"
  ansible.builtin.set_fact:
    controller_execution_environments: "{{ __populate_controller_execution_environments }}"
  no_log: "{{ controller_configuration_filetree_read_secure_logging }}"
  when: __populate_controller_execution_environments is defined
...
